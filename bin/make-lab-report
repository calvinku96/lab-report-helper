#!/usr/bin/env python2.7
import os
import sys
import json


def create_dir():
    cwd = os.getcwd()
    
    # settings file
    settings_list = [
        "{",
        "\t\"DATASETS_LIST\":{\"process\":[\"Experiment\"]},",
        "\t\"PURPOSE\":{",
        "\t\t\"data\":{\"folder\":\"data\", \"extension\":\"dat\"},",
        "\t\t\"pickle\":{\"folder\":\"pickle\", \"extension\":\"pickle\"},",
        "\t\t\"plots\":{\"folder\":\"plots\", \"extension\":\"pdf\"},",
        "\t\t\"tables\":{\"folder\":\"tables\", \"extension\":\"tex\"}",
        "\t},",
        "\t\"COMPUTE\":{\"name\":\"compute\", \"extension\": \"tex\"},",
        "\t\"PYTHON_MODULE\":\"python\"",
        "}",
    ]
    settings_str = "\n".join(settings_list)
    settings = json.loads(settings_str)
    folders = [a["folder"] for a in settings["PURPOSE"].itervalues()]
    folders.append(settings["PYTHON_MODULE"])
    settings_path = cwd + os.sep + "settings" + os.extsep + "json"
    if os.path.isfile(settings_path):
        with open(settings_path, 'rb') as f:
            settings = json.load(f)
    else:
        with open(settings_path, 'wb') as f:
            f.write("\n".join(settings_list))

    for foldername in folders:
        fullpath = cwd + os.sep + foldername + os.sep
        if not os.path.exists(fullpath):
            os.makedirs(fullpath)
        fullpath += os.extsep + "keep"
        with open(fullpath, 'a'):
            os.utime(fullpath)

    # manage.py
    manage_list = [
        "#!/usr/bin/env python2.7",
        "\"\"\"",
        "Pass sys.argv to lab-report-helper.manage.manage",
        "\"\"\"",
        "import sys",
        "import os",
        "import json",
        "import importlib",
        "",
        "",
        "def main():",
        "\t\"\"\"",
        "\tMethod that interfaces with user",
        "\t\"\"\"",
        "\tfrom lab-report-helper.lib.manage import manage",
        "\tsys.path.append(os.path.realpath(__file__))",
        "\tsettings_path = os.sep.join(os.path.realpath" +\
            "(__file__).split(os.sep)[:-1])",
        "\tsettings_path += os.sep + \"settings\" + os.extsep + \"json\"",
        "\twith open(settings_path, 'rb') as settings_file:",
        "\t\tsettings = json.load(settings_file)",
        "\tpython_folder = settings.get(\"PYTHON_MODULE\", \"python\")",
        "\tvar = importlib.import_module(python_folder + \".variables\")",
        "\tmanage(settings_path, var.ROOT_DIR, sys.argv)",
        "",
        "if __name__ == \"__main__\":",
        "\tmain()"
    ]
    with open(cwd + os.sep + "manage" + os.extsep + "py", "wb") as f:
        f.write("\n".join(manage_list))
    # constants.py
    constant_list = [
        "\"\"\"",
        "Module to store user defined constants",
        "\"\"\"",
        "",
        ""
    ]
    with open(cwd + os.sep + settings["PYTHON_MODULE"] + os.sep + "constant" +
              os.extsep + "py", 'wb') as f:
        f.write("\n".join(constant_list))
    # process.py
    process_list_pre = [
        "\"\"\"",
        "Main Module. All operations are put here",
        "\"\"\"",
        "from lab-report-helper.dataset import DataSets"
    ]
    process_list_repeat = [
        "",
        "",
        "class {classname}(DataSets):",
        "\t\"\"\"",
        "\tData Processing, Plots, LaTeX Macros, and Tables",
        "\t\"\"\"",
        "\tdata = {",
        "\t\t}",
        "",
        "\tdef operations(self):",
        "\t\t\"\"\"",
        "\t\tMain operations",
        "\t\t\"\"\""
    ]
    for key, val in settings["DATASETS_LIST"].iteritems():
        with open(cwd + os.sep + settings["PYTHON_MODULE"] + os.sep + key
                + os.extsep + "py", 'wb') as f:
            f.write("\n".join(process_list_pre))
            for classname in val:
                f.write(
                    "\n".join(process_list_repeat).format(classname=classname)
                )
    # variables.py
    variables_list = [
        "\"\"\"",
        "Variables",
        "\"\"\"",
        "",
        "",
        "# NEEDED BY lab-report-helper DO NOT DELETE",
        "ROOT_DIR = os.sep.join(os.path.realpath(__file__).split(os.sep)[:-2])",
        "",
        "# USER DEFINED VARIABLES",
        "import python.constants as constants"
    ]
    with open(cwd + os.sep + settings["PYTHON_MODULE"] + os.sep + "variables" +
            os.extsep + "py", 'wb') as f:
        f.write("\n".join(variables_list))


create_dir():
